<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- nl.naturalis.oaipmh.rest -->
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless"
         basedir="."
         name="nl.naturalis.oaipmh.rest"
         default="build">

	<import file="../nl.naturalis.oaipmh.build/properties.xml" />
	<import file="../nl.naturalis.oaipmh.build/common.xml" />
	<property file="../nl.naturalis.oaipmh.build/build.properties" />

	<property environment="env" />

	<path id="non-ivy-dependencies">
		<!-- projects that this project depends on -->
		<filelist dir="${api.module.location}/build" files="${api.module.artifact}" />
		<filelist dir="${geneious.module.location}/build"
		          files="${geneious.module.artifact}" />
		<!-- libraries not inside this project's lib dir -->
		<filelist dir="${build.module.location}/lib">
			<file name="org.domainobject.util.jar" />
		</filelist>
	</path>

	<!-- Build projects that this project depends on -->
	<target name="-projects">
		<echo message="Building required projects for ${ant.project.name}" />
		<ant antfile="${api.module.location}/build.xml"
		     useNativeBasedir="true"
		     inheritrefs="true" />
		<ant antfile="${geneious.module.location}/build.xml"
		     useNativeBasedir="true"
		     inheritrefs="true" />
	</target>

	<target name="create-version-file" depends="git-info">
		<propertyfile file="${rest.module.location}/src/main/resources/version.properties"
		              comment="Generated by Ant build">
			<entry key="git.branch" value="${git.branch}" />
			<entry key="git.tag" value="${git.tag}" />
			<entry key="git.commit" value="${git.commit}" />
			<entry key="built" type="date" value="now" />
		</propertyfile>
	</target>

	<target name="-package" depends="-projects,create-version-file,compile-sources">
		<!-- Location of the official library directory for the webapp -->
		<property name="war.lib.dir" location="WebContent/WEB-INF/lib" />
		<!-- Location into which we will collect the libraries for the webapp -->
		<property name="tmp.lib.dir" location="build/tmp-lib" />
		<!-- Location to which to temporarily move the official library directory -->
		<property name="orig.lib.dir" location="build/orig-lib" />
		<delete dir="${tmp.lib.dir}" />
		<delete dir="${orig.lib.dir}" />
		<mkdir dir="${war.lib.dir}" />
		<mkdir dir="${tmp.lib.dir}" />
		<!-- Add api module -->
		<copy file="${api.module.location}/build/${api.module.artifact}"
		      todir="${tmp.lib.dir}" />
		<!-- Add geneious module -->
		<copy file="${geneious.module.location}/build/${geneious.module.artifact}"
		      todir="${tmp.lib.dir}" />
		<!-- Copy required libraries for api, geneious, and rest modules -->
		<copy todir="${tmp.lib.dir}" overwrite="false">
			<fileset dir="${api.module.location}/build/classpath"
			         excludes="*-sources.jar,*-javadoc.jar" />
			<fileset dir="${geneious.module.location}/build/classpath"
			         excludes="*-sources.jar,*-javadoc.jar" />
			<fileset dir="${rest.module.location}/build/classpath"
			         excludes="*-sources.jar,*-javadoc.jar" />
		</copy>
		<!-- Copy libraries from the official lib dir to temporary lib dir -->
		<copy todir="${tmp.lib.dir}">
			<fileset dir="${war.lib.dir}" />
		</copy>
		<!-- Temporarily move official lib dir out of the way -->
		<move file="${war.lib.dir}" tofile="${orig.lib.dir}" />
		<!-- Make the temporary lib dir the official lib dir -->
		<move file="${tmp.lib.dir}" tofile="${war.lib.dir}" />
		<!-- Create the war file -->
		<war destfile="build/${rest.module.artifact}" webxml="WebContent/WEB-INF/web.xml">
			<lib dir="${war.lib.dir}" />
			<classes dir="build/main" excludes="**/.git*" />
			<fileset dir="WebContent" />
		</war>
		<!-- Put everything back to where it was -->
		<move file="${war.lib.dir}" tofile="${tmp.lib.dir}" />
		<move file="${orig.lib.dir}" tofile="${war.lib.dir}" />
	</target>

	<!-- Export war file, but only if it does not exist already -->
	<target name="build">
		<available file="build/${rest.module.artifact}"
		           property="${ant.project.name}.packaged" />
		<echo if:set="${ant.project.name}.packaged"
		      message="${ant.project.name} already built. Clean project to force rebuild." />
		<echo unless:set="${ant.project.name}.packaged"
		      message="*************** [ Building ${ant.project.name} ] ***************" />
		<antcall target="-package" unless:set="${ant.project.name}.packaged" />
	</target>

	<target name="install" depends="build" description="Deploy the war file">
		<move file="build/${rest.module.artifact}" todir="${war.install.dir}" />
	</target>

</project>
